#!/usr/bin/env bash

if [ -n "$DEBUG" ]; then
  set -x
fi

# fail hard
set -o pipefail
# fail harder
set -eu

php_version=${1:=8.2}
php_series="$(echo "$php_version" | cut -d '.' -f1,2)"

# https://docs.blackfire.io/up-and-running/installation?action=install&mode=full&location=local&os=manual&language=php&version=latest&#install-the-php-probe
#
# → Under "Install the PHP Probe", select "Linux Binary", 64 bits and your PHP version. Open the network inspector to identify the request triggered when you click on "Download". It contains the last version.
blackfire_probe_version=1.92.41

# https://docs.blackfire.io/up-and-running/installation?action=install&mode=full&location=local&os=manual&language=php&version=latest&#install-the-packages
#
# → Under "Install the Packages", select "Linux Binary" and 64 bits. Open the network inspector to identify the request triggered when you click on "Download". It contains the last version.
blackfire_agent_version=2.29.0

mkdir --parents "${EXT_DIR}"
bin_dir=${PREFIX}/bin
mkdir --parents "${bin_dir}"
mkdir --parents "${PREFIX}/var/blackfire/run"
mkdir --parents "${PREFIX}/etc/blackfire"

echo "-----> Packaging Blackfire Probe ${blackfire_probe_version}..."
curl --location --silent --output blackfire.so \
  "https://packages.blackfire.io/binaries/blackfire-php/${blackfire_probe_version}/blackfire-php-linux_amd64-php-$(echo "$php_series" | tr -d '.').so"
mv blackfire.so "${EXT_DIR}/blackfire.so"

echo "-----> Packaging Blackfire Agent ${blackfire_agent_version}..."
curl --location --silent --output blackfire-agent.tar.gz \
  "https://packages.blackfire.io/binaries/blackfire/${blackfire_agent_version}/blackfire-linux_amd64.tar.gz"
tar -zxf blackfire-agent.tar.gz
chmod +x blackfire
# Both the agent and the CLI are actually the same binary. For legacy purpose it is expected that the CLI is named `blackfire` and the agent is named `blackfire-agent`.
cp blackfire "${bin_dir}/blackfire-agent"
cp blackfire "${bin_dir}/blackfire"
chmod +x "${bin_dir}/blackfire-agent" "${bin_dir}/blackfire"
rm blackfire-agent.tar.gz blackfire blackfire.sha1

echo -e "[blackfire]\nserver-id=f1abf3a8-3f85-4743-99b2-97f066c099b9\nserver-token=5ecbc6486e9db6b780a0c0a9ef1e244709e632996fe9105cb9075ab2826944d5" > "${PREFIX}/etc/blackfire/agent.ini"

find ${PREFIX} -type f \( -executable -o -name '*.a' \) -exec sh -c "file -i '{}' | grep -Eq 'application/x-(archive|executable|sharedlib); charset=binary'" \; -print | xargs strip --strip-unneeded

# gets sourced on container boot
cat > "${PREFIX}/bin/profile.blackfire.sh" <<'EOF'
if [[ -n "$BLACKFIRE_SERVER_TOKEN" && -n "$BLACKFIRE_SERVER_ID" ]]; then
	if [[ -f "/app/vendor/php/bin/blackfire-agent" ]]; then
		touch /app/vendor/php/var/blackfire/run/agent.sock
		/app/vendor/php/bin/blackfire-agent -config=/app/vendor/php/etc/blackfire/agent.ini -socket="unix:///app/vendor/php/var/blackfire/run/agent.sock" &
	else
		echo >&2 "WARNING: Add-on 'blackfire' detected, but PHP extension not yet installed. Push an update to the application to finish installation of the add-on; an empty change ('git commit --allow-empty') is sufficient."
	fi
fi
EOF

mkdir --parents "${PREFIX}/etc/php/conf.d"
cat > "${PREFIX}/etc/conf.d/blackfire.ini" <<'EOF'
extension = blackfire.so

blackfire.server_token = ${BLACKFIRE_SERVER_TOKEN}
blackfire.server_id = ${BLACKFIRE_SERVER_ID}
blackfire.agent_socket = "unix:///app/vendor/php/var/blackfire/run/agent.sock"
EOF

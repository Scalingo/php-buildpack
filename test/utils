#!/usr/bin/env bash

# taken from
# https://github.com/ryanbrainard/heroku-buildpack-testrunner/blob/master/lib/test_utils.sh

test::utils::setupFixture() {
    # Deploys a fixture by copying the fixture files in $BUILD_DIR.
    # The fixture code must be stored in `BUILDPACK_DIR/test/fixtures/$fixture`
    #
    # Globals:
    #   BUILDPACK_DIR
    #   BUILD_DIR
    #
    # Arguments:
    #   $1 > $fixture: Name of the fixture. This is also the name of the
    #      directory that contains the code to be deployed.

    local fixture="${1}"

    cp --archive "${BUILDPACK_DIR}/test/fixtures/${fixture}"/* "${BUILD_DIR}/"
}

test::utils::detect() {
    # Runs the `bin/detect` script of the buildpack.
    # Outputs are captured to allow for further analysis.
    #
    # Globals:
    #   BUILDPACK_DIR
    #   BUILD_DIR

    test::utils::capture "${BUILDPACK_DIR}/bin/detect" "${BUILD_DIR}"
}

test::utils::compile() {
    # Runs the `bin/compile` script of the buildpack.
    # Outputs are captured to allow for further analysis.
    #
    # Globals:
    #   BUILDPACK_DIR
    #   BUILD_DIR
    #   CACHE_DIR

    test::utils::capture "${BUILDPACK_DIR}/bin/compile" "${BUILD_DIR}" \
        "${CACHE_DIR}"
}

test::utils::capture() {
    # Runs the given command and captures its outputs:
    # - redirects stdout to $STD_OUT
    # - redirects stderr to $STD_ERR
    # - stores the command in $LAST_COMMAND
    # - stores the exit code of the command run in $RETURN
    #
    # All outputs (see Globals) are emptied prior to the command being run.
    #
    # Globals:
    #   LAST_COMMAND
    #   RETURN
    #   STD_OUT
    #   STD_ERR
    #
    # Arguments:
    #   $@ > $LAST_COMMAND: Command (with arguments) to run and for which
    #      outputs are captured.

    test::utils::resetCapture

    LAST_COMMAND="$@"

    "$@" >"${STD_OUT}" 2>"${STD_ERR}"

    RETURN="${?}"
}

test::utils::resetCapture() {
    # Resets the globals used to capture the functions results:
    # - removes the file pointed by $STD_OUT
    # - removes the file pointed by $STD_ERR
    # - unsets LAST_COMMAND
    # - unsets RETURN
    #
    # Globals:
    #   LAST_COMMAND
    #   RETURN
    #   STD_OUT
    #   STD_ERR

    if [ -f "${STD_OUT}" ]; then
        rm "${STD_OUT}"
    fi

    if [ -f "${STD_ERR}" ]; then
        rm "${STD_ERR}"
    fi

    unset LAST_COMMAND
    unset RETURN
}

test::utils::assertSuccess() {
    # Asserts that the last command run exited with a status code of 0.
    #
    # Globals:
    #   RETURN

    assertEquals  \
        "Expected captured exit code to be 0; was <${RETURN}>" \
        "0" "${RETURN}"
}

test::utils::assertMatches() {

	local needle
	local haystack

	needle="${1}"
	haystack="${2}"

	if [[ ! "${haystack}" =~ ${needle} ]]; then
		fail "Expected <${haystack}> to match <${needle}>"
	fi
}

test::utils::assertStdoutMatches() {

	local needle
	local haystack

	needle="${1}"
	haystack="$( cat "${STD_OUT}" )"

	test::utils::assertMatches "${needle}" "${haystack}"
}

test::utils::assertStderrMatches() {

	local needle
	local haystack

	needle="${1}"
	haystack="$( cat "${STD_ERR}" )"

	test::utils::assertMatches "${needle}" "${haystack}"
}

test::utils::command_exists () {
    # Asserts that the given command exists.
    #
    # Arguments:
    #   $1: Name of the command that should be present.

    type "${1}" > /dev/null 2>&1 ;
}

test::utils::assertFileMD5() {
    # Asserts that the given file md5 checksum matches the actual one.
    #
    # Arguments:
    #   $1 > $expectedHash: Expected md5 hash.
    #
    #   $2 > $filename: Path to the file for which we want to check the md5
    #      hash.

    local expectedHash="${1}"
    local filename="${2}"

    if test::utils::command_exists "md5sum"; then
        md5_cmd="md5sum ${filename}"
        expected_md5_cmd_output="${expectedHash}  ${filename}"
    elif test::utils::command_exists "md5"; then
        md5_cmd="md5 ${filename}"
        expected_md5_cmd_output="MD5 (${filename}) = ${expectedHash}"
    else
        fail "no suitable MD5 hashing command found on this system"
    fi

    assertEquals "${expected_md5_cmd_output}" "$( "${md5_cmd}" )"
}

test::utils::assertDirectoryExists() {
    # Asserts that the given path exists and is a directory.
    #
    # Arguments:
    #   $1 > $dir_path: Fixed string that is searched at the very beginning of
    #      `$haystack`.

    local dir_path="${1}"

    if [[ ! -e "${dir_path}" ]]; then
        fail "${dir_path} does not exist"
    fi

    if [[ ! -d "${dir_path}" ]]; then
        fail "${dir_path} is not a directory"
    fi
}

test::utils::assertFileExists() {
    # Asserts that the given path exists and is a file.
    #
    # Arguments:
    #   $1 > $file_path: Path to the file that must exist.

    local file_path="${1}"

    if [[ ! -e "${file_path}" ]]; then
        fail "${file_path} does not exist"
    fi

    if [[ ! -f "${file_path}" ]]; then
        fail "${file_path} is not a file"
    fi
}

test::utils::assertFileDoesNotExist() {
    # Asserts that the given path does not exist.
    #
    # Arguments:
    #   $1 > $file_path: Path that must not exist.

    local file_path="${1}"

    assertTrue "${file_path} exists" "[[ ! -e "${file_path}" ]]"
}
